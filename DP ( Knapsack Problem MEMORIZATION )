int knapsack_Mem(int *weights, int *values, int index, int capacity,int **dp) {
 if(index==0){
	 if(weights[0]<=capacity){
		 return values[0];
	 }
	 else{
		 return 0;
	 }
 }
 if(dp[index][capacity]!=-1){
	 return dp[index][capacity];
 }
  if (weights[0] > capacity) {
    return knapsack_Mem(weights + 1, values + 1, index - 1, capacity,dp);
  }
  int x =knapsack_Mem(weights + 1, values + 1, index - 1, capacity - weights[0],dp) +
      values[0];
  int y = knapsack_Mem(weights + 1, values + 1, index - 1, capacity,dp);
  int ans= max(x, y);
  dp[index][capacity]=ans;
  return ans;
}

int knapsack(int *weights, int *values, int n, int maxWeight) {
	//Creation of 2-D DP array
	int **dp=new int *[n+1];
	for(int i=0;i<=n;i++){
		dp[i]=new int [maxWeight+1];
		for(int j=0;j<=maxWeight;j++){
			dp[i][j]=-1;
		}
	}

 return knapsack_Mem(weights, values,  n-1, maxWeight,dp);
}
