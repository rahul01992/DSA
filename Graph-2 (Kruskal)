#include <bits/stdc++.h>
#include <iostream>
using namespace std;
class Edge{
    public:
    int source;
    int dest;
    int weight;
};
bool compare(Edge e1,Edge e2){
    return e1.weight<e2.weight;
}
int findParent(int v,int* parent){
    if(parent[v]==v){
        return v;
    }
    return findParent(parent[v], parent);
}
void kruskals(Edge* input,int n ,int E){
    //sort the input array
   sort(input,input+E,compare);//pass compare function(sort on the basis on compare function)
   int *parent=new int[n];//size n because store parent of each vertex
   for(int i=0;i<n;i++){
       parent[i]=i;
   }
   Edge* output=new Edge[n-1];//Store n-1 edges
   int count =0;
   int i=0;
   while(count!=n-1){
       Edge currentEdge=input[i];//pick up currrent ege from the input array
       //check if this edge is safe or not( check if current Edge k source or destination na parent same or not)
       int Source=findParent(currentEdge.source,parent);
       int Destination=findParent(currentEdge.dest,parent);
       if(Source!=Destination){
           output[count]=currentEdge;//use count because count is the number of edges in spanning tree
           count++;
           parent[Source]=Destination;
       }
       i++;
   }
   //Print Spanning Tree
   for(int i=0;i<n-1;i++){
       if(output[i].source<output[i].dest){
         cout << output[i].source<<" "<<output[i].dest<<" "<<output[i].weight<<endl;
       }
       else{
         cout <<output[i].dest << " " << output[i].source<<" " << output[i].weight << endl;
       }
   }
}
int main() {
    int n,E;//Input number of vertex and number of edges
    cin>>n>>E;

    Edge* input=new Edge[E];//To store information of each edge
    for(int i=0;i<E;i++){
        int s,d,w;
        cin>>s>>d>>w;
        input[i].source=s;
        input[i].dest=d;
        input[i].weight=w;
    }
    kruskals(input,n,E);
}
