//Add two number of linked list
class Solution
{
    private:
    Node* reverce(Node * head){
    Node* curr=head;
    Node* prev=NULL;
    Node* next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}
void insertAtTail(struct Node* &head,struct Node* &tail,int value){
    Node *temp=new Node(value);
    if(head==NULL){
        head=temp;
        tail=temp; 
        return;
    }
    else{
        tail->next=temp;
        tail=temp;
    }
}
struct Node* add(struct Node* first, struct Node* second){
    int carry=0;
    Node* anshead=NULL;
    Node* anstail=NULL;
    while(first!=NULL && second!=NULL){
            int sum=carry+first->data+second->data;
        int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
        first=first->next;
        second=second->next;    
    }


while(first!=NULL){
    int sum=carry+first->data;
    int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
        first=first->next;
}
while(second!=NULL){
    int sum=carry+second->data;
    int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
       second=second->next;
}
while(carry!=0){
    int sum=carry;
    int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
        
}
return anshead;
  } 
  public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second) {
    first=reverce(first);
    second=reverce(second);
    Node* ans =add(first,second);
    ans=reverce(ans);
    return ans;
}
};
class Solution
{
    private:
    Node* reverce(Node * head){
    Node* curr=head;
    Node* prev=NULL;
    Node* next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}
void insertAtTail(struct Node* &head,struct Node* &tail,int value){
    Node *temp=new Node(value);
    if(head==NULL){
        head=temp;
        tail=temp; 
        return;
    }
    else{
        tail->next=temp;
        tail=temp;
    }
}
struct Node* add(struct Node* first, struct Node* second){
    int carry=0;
    Node* anshead=NULL;
    Node* anstail=NULL;
    while(first!=NULL && second!=NULL){
            int sum=carry+first->data+second->data;
        int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
        first=first->next;
        second=second->next;    
    }


while(first!=NULL){
    int sum=carry+first->data;
    int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
        first=first->next;
}
while(second!=NULL){
    int sum=carry+second->data;
    int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
       second=second->next;
}
while(carry!=0){
    int sum=carry;
    int digit=sum%10;
        insertAtTail(anshead,anstail,digit);
        carry=sum/10;
        
}
return anshead;
  } 
  public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second) {
    first=reverce(first);
    second=reverce(second);
    Node* ans =add(first,second);
    ans=reverce(ans);
    return ans;
}
};
