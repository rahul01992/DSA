#include <bits/stdc++.h>

using namespace std;

int board[11][11];

bool isPossible(int n, int row, int col) {

  // Same Column
  for (int i = row - 1; i >= 0; i--) {
    if (board[i][col] == 1) {
      return false;
    }
  }
  // Upper Left Diagonal
  for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
    if (board[i][j] == 1) {
      return false;
    }
  }

  // Upper Right Diagonal

  for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
    if (board[i][j] == 1) {
      return false;
    }
  }

  return true;
}
void nQueenHelper(int n, int row) {
  if (row == n) {
    // We have reached some solution.
    // Print the board matrix
    // return

    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        cout << board[i][j] << " ";
      }
    }
    cout << endl;
    return;
  }

  // Place at all possible positions and move to smaller problem
  for (int j = 0; j < n; j++) {

    if (isPossible(n, row, j)) {
      board[row][j] = 1;
      nQueenHelper(n, row + 1);
      board[row][j] = 0;
    }
  }
  return;
}
void placeNQueens(int n) {

  memset(board, 0, 11 * 11 * sizeof(int));

  nQueenHelper(n, 0);
}
int main() {
 int n;
 cin>>n;
  placeNQueens(n);
  return 0;
}



Practice time code

#include<bits/stdc++.h>
using namespace std;
int board[11][11];
bool isPossible(int n,int row,int col){
    //check in vertical 
    for(int i=row-1;i>=0;i--){
        if(board[i][col]==1){
            return false;
        }
    }
    //check in left diagonal
    for(int i=row-1, j=col-1;i>=0 && j>=0;i--,j--){
      if (board[i][j] == 1) {
        return false;
      }
    }
    //check in right diagonal( column number incrase)
    for(int i=row-1,j=col+1;i>=0 && j<n;i--,j++){
        if(board[i][j]==1){
            return false;
        }
    }
    return true;
}
void QueenHelper(int n,int row){
    if(row==n){//we reached the solution Now we have to print the solution
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<board[i][j]<<" ";
        }
    }
    cout<<endl;
    return;
    
    }
    for(int j=0;j<n;j++){//check the position of queen column wise
        if(isPossible(n,row,j)){
            board[row][j]=1;
            QueenHelper(n, row+1);
            board[row][j]=0;
        }
    }
    
}
void placeNQueen(int n){
    memset(board,0,11*11*sizeof(int));
    QueenHelper(n,0);//start with row number=0
}
int main(){
    int n;
    cin>>n;
    placeNQueen(n);
    return 0;
}
