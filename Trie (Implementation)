#include <iostream>
using namespace std;
// TrieNode class creation
class TrieNode
{
public:
    char data;           // data of character type
    TrieNode **children; // store the address of children
    bool isTerminal;
    TrieNode(char data)
    {
        children = new TrieNode *[26];
        this->data = data;
        isTerminal = false;
    }
};
void insertWord(TrieNode *root, string word)
{
    if (word.length() == 0)
    {
        root->isTerminal = true;
        return;
    }
    int index = word[0] - 'a';
    TrieNode *child;
    if (root->children[index] != NULL)
    {
        child = root->children[index];
    }
    else
    {
        child = new TrieNode(word[0]);
        root->children[index] = child;
    }
    insertWord(child, word.substr(1));
}
bool search(TrieNode *root, string word)
{
    if (word.size() == 0)
    {
        return root->isTerminal;
    }
    TrieNode *child;
    int index = word[0] - 'a';
    if (root->children[index] != NULL)
    {
        child = root->children[index];
    }
    else
    {
        return false;
    }
    return search(child, word.substr(1));
}
// bool search(string word)
// {
//     return search(root, word);
// }
void remove(TrieNode *root, string word)
{
    if (word.size() == 0)
    {
        root->isTerminal = false;
        return;
    }
    TrieNode *child;
    int index = word[0] - 'a';
    if (root->children[index] != NULL)
    {
        child = root->children[index];
    }
    else
    {
        return;
    }
    remove(child, word.substr(1));

    // Delete the Node if useless
    if (child->isTerminal == false)
    {
        for (int i = 0; i < 26; i++)
        {
            if (root->children[i] != NULL)
            {
                return;
            }
        }
        delete child;
        root->children[index] = NULL;
    }
}
int main()
{

    return 0;
}
