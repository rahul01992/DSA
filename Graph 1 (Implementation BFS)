#include <iostream>
#include<queue>
using namespace std;
void print_BFS(int** edge,bool* visited,int n,int sv,int e){
  if(n==0&&e==0){
    return;
  }
    queue<int>q;
    q.push(sv);
    visited[sv]=true;
    while(!q.empty()){
        int front=q.front();
        cout<<front<<" ";
        q.pop();
        for(int i=0;i<n;i++){
            if(edge[front][i]==1 && !visited[i]){//edge exist but not visited
                q.push(i);
                visited[i]=true;
            }
        }
        
    }

}

int main() {
  int n;
  int e;
  cin >> n;
  cin >> e;
  
  int **edge = new int *[n];
  for (int i = 0; i < n; i++) {
    edge[i] = new int[n];
    for (int j = 0; j < n; j++) {
      edge[i][j] = 0;
    }
  }
  // take input of edges
  for (int i = 0; i < e; i++) {
    int f;
    int e;
    cin >> f >> e;
    edge[f][e] = 1;
    edge[e][f] = 1;
  }
  bool *visited = new bool[n];
  for (int i = 0; i < n; i++) {
    visited[i] = 0;
  }
  for(int i=0;i<n;i++){
    if(!visited[i]){
       print_BFS(edge,visited,n,i,e);

    }
  }
 
}
