Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2) {
  if (head1 == NULL && head2 != NULL) {
    return head2;
  }
  if (head2 == NULL && head1 != NULL) {
    return head1;
  }
  if (head1 == NULL && head2 == NULL) {
    return NULL;
  }

  Node *finalHead = NULL;
  Node *finalTail = NULL;

  if (head1->data < head2->data) {
    finalHead = head1;
    finalTail = head1;
    head1 = head1->next; // check
  } else {
    finalHead = head2;
    finalTail = head2;
    head2 = head2->next; // check
  }

  while (head1 != NULL && head2 != NULL) {

    if (head1->data <= head2->data) {
      
      finalTail->next = head1;
      finalTail = head1;
      head1 = head1->next;
    } else {
    
      finalTail = head2;
      head2 = head2->next;
    }
  }

  if (head2 != NULL) {

    finalTail->next = head2;
  }
  if (head1 != NULL) {

    finalTail->next = head1;
  }

  return finalHead;
}

Node *mergeSort(Node *head) {
  if (head == NULL || head->next == NULL) {
    return head;
  }

  Node *slow = head;
  Node *fast = head->next;

  while (fast != NULL && fast->next != NULL) {
    slow = slow->next;
    fast = fast->next->next;
  }
  Node *h2 = slow->next;
  slow->next = NULL;

  head = mergeSort(head);
  h2 = mergeSort(h2);

  return mergeTwoSortedLinkedLists(head, h2);
}
